# <README> ==========================================================================================


Programming Assignment 3

Lab Group: Derek Heidtke and Ryan Hill

======================================================
Roles:

Derek Heidtke
	- server.C
	- headers.H
	- debugging

Ryan Hill
	- udpclient.c
	- mistakenly worked on TFTP client, the simple udp message protocol was functional but had issues with compiling once file transfer was implemented

======================================================
Test Cases:

Application was tested using a simple linux TFTP client, 'tftp,' using the loopback IP addr 127.0.0.1. The PNG image included with the source code documents the working condition of the tftp server under the load of multiple clients. During transmission, the server verbosely logs the activity of each running child process. Additionally, you can verify that the files received by the clients are indeed exact copies of the files stored in the server's directory.

Was not able to implement the timeout timer; however, the basic stop-and-wait protocol is preserved. There is essentially no delay when the client and server are on the same machine. anyway.
======================================================
Architecture:

The server was designed to use the concurrency method, i.e each new RRQ from a client would cause the main server appl. to fork a child to handle the request. When the server child finishes distributing the requested data file, it terminates. All communication is done over sockets using UDP and the functions sendto() and recvfrom().
Maximum packet size was chosen to be 512B (as specified by the lab manual). Only RRQ, ACK, DATA, and ERRmessages were implemented.


# </README> ==========================================================================================

# <MAKEFILE> ==========================================================================================

server: server.C
	g++ -g server.C -o "server"

test:
	./server 127.0.0.1 47777

db:
	gdb

clean:
	rm "server"

# </MAKEFILE> ==========================================================================================

# <HEADERS.H> ==========================================================================================

// Written by Derek Heidtke

#define TFTP_RRQ 1
#define TFTP_DAT 3
#define TFTP_ACK 4
#define TFTP_ERR 5

#define MAXLINE 512

typedef struct TFTPMESSAGE {	
	char filename[20];
	uint16_t opcode, seqNum, error;
} TFTPMESSAGE;

typedef struct CLIRECORD
{
	int 		n;
	uint16_t	seqNum;
	int 		cliSockfd;
	FILE 		*fp1, *fp2;
	char 		filename[20];
	struct 		timespec time;
	int 		lastSegmentSent;
	struct 		sockaddr_in cliaddr;
} CLIRECORD;

// translate/decode/copy incoming message from buffer to TFTPMESSAGE object
int tftpDecode(char* buf, TFTPMESSAGE* m) {

	uint16_t 	offset, i, j;
	char 		tmp[2];

	offset = 0;
	i = 0;
	j = 0;

	memcpy(tmp, buf, 2);
	m->opcode = ntohs( *((uint16_t*)tmp) );
	offset += 2;	

	if(m->opcode == TFTP_ACK) {				// if ACK message
		memcpy(tmp, buf+offset, 2);
		m->seqNum = ntohs(*((uint16_t*)tmp));
		offset += 2;
		
	} else if(m->opcode == TFTP_RRQ) {		// if RRQ message
		for(i=2, j=0; buf[i] != '\0'; i++, j++){
			m->filename[j] = buf[i];
		}
		m->filename[j] = '\0';

		// std::cout << "\n" << m->filename << std::flush;

	} else if(m->opcode == TFTP_ERR) {		// if ERR message
		memcpy(tmp, buf+offset, 2);
		m->error = ntohs(*((uint16_t*)tmp));
		offset += 2;	
	}

	return 0;
}

void make_tftp_message(int len, FILE* fp, char *&buffer, uint16_t opcode, uint16_t seqNum) {
	
	// size += len;
	uint16_t size = 4 + len;

	// allocate new space for data
	buffer = new char[size];
	memset(buffer,'\0',size);

	// insert first two data fields: opcode, blcok number
	opcode = htons(opcode);
	seqNum = htons(seqNum);
	memcpy(buffer, &opcode,2);
	memcpy(buffer+2, &seqNum,2);

	// append file data to data packet
	fread(buffer+4,1,len, fp);	
}

// send specified data file to specified client
int tftpRespondRRQ(TFTPMESSAGE* m, struct sockaddr* pcliaddr, CLIRECORD* clientInfo) {

	int 			n;
	std::string		bufstr;

	std::cout << "\nSending file: <" << m->filename << "> to client." << std::flush;

	// open the file from the beginning
	clientInfo->fp1 = fopen(m->filename, "r");
	if (clientInfo->fp1 != NULL) {	// file opened successfully
		
		// start constructing the data to be sent
		TFTPMESSAGE sendData;
		sendData.seqNum = 1;
		sendData.opcode = TFTP_DAT;
		std::cout << "\nFile opened successfully." << std::flush;

		// open file from the end
		clientInfo->fp2 = fopen(m->filename, "r");
		if (clientInfo->fp2 == NULL) {
			std::cerr << "\nERROR: " << strerror(errno) << std::endl;
			return 0;
		}
		fseek(clientInfo->fp2, 0, SEEK_END);

		// find the difference
		n = ftell(clientInfo->fp2) - ftell(clientInfo->fp1);

		// updata clientInfo
		if (n >= MAXLINE) {
			n = MAXLINE;
		} else {
			clientInfo->lastSegmentSent = 1;
		}
		clientInfo->n = n;

		// // finish making the message
		char* 	buf;

		make_tftp_message(n, clientInfo->fp1, buf, sendData.opcode, sendData.seqNum);

		// std::cout << "\nsendBuf: " << buf << std::flush;

		// send the message
		sendto(clientInfo->cliSockfd, buf, n+4, 0, pcliaddr, sizeof(struct sockaddr_in) );
		std::cout << "\nSending segment of size, " << n << " to client." << std::flush;

	} else { // error opening file

		std::cout << "\nCould not open file." << std::flush;

		/* creat error message*/
		uint16_t 	opcode 	= TFTP_ERR;
		uint16_t 	errcode = 1;
		int 		errSize = 100;

		// allocate space for error message
		char buffer[errSize];
		memset(buffer,'\0',errSize);

		// fill data fields with opcode, error code, and error message
		opcode = htons(opcode);
		errcode = htons(errcode);
		memcpy(buffer, &opcode, 2);
		memcpy(buffer+2, &errcode, 2);
		memcpy(buffer+4,"File not Found",strlen("File not Found"));

		sendto(clientInfo->cliSockfd, buffer, errSize, 0, pcliaddr, sizeof(struct sockaddr_in) );

		return -1; 		
	}

	return 0;
}

int tftpRespondACK(TFTPMESSAGE* m, struct sockaddr* pcliaddr, CLIRECORD* clientInfo) {

	int 	n;

	std::cout << "\nReceived ACK for block number: " << m->seqNum << std::flush;

	// update clientInfo
	clientInfo->seqNum = m->seqNum + 1;	// the NEXT data block

	// start constructing the data to be sent
	TFTPMESSAGE sendData;
	sendData.seqNum = clientInfo->seqNum;
	sendData.opcode = TFTP_DAT;

	// open file from the end
	clientInfo->fp2 = fopen(m->filename, "r");
	if (clientInfo->fp2 == NULL) {
		std::cerr << "\nERROR: " << strerror(errno) << std::endl;
		return 0;
	}
	fseek(clientInfo->fp2, 0, SEEK_END);

	// find the difference
	n = ftell(clientInfo->fp2) - ftell(clientInfo->fp1);

	// updata clientInfo
	if (n >= MAXLINE) {
		n = MAXLINE;
	} else {
		clientInfo->lastSegmentSent = 1;
	}
	clientInfo->n = n;

	// finish making the message
	char*	buf;
	make_tftp_message(n, clientInfo->fp1, buf, sendData.opcode, sendData.seqNum);

	// send the message
	sendto(clientInfo->cliSockfd, buf, n+4, 0, pcliaddr, sizeof(struct sockaddr_in) );
	std::cout << " >> Sending block number, " << sendData.seqNum << " ..." << std::flush;
	
	return 0;
}

# </HEADERS.H> ==========================================================================================

# <SERVER.C> ==========================================================================================

// Echo Server
// Written by: Derek Heidtke

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#include <iostream>

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/select.h>

#include "headers.H"

int main (int argc, char** argv) {

	int 	servport, sockfd;
	struct 	sockaddr_in servaddr, cliaddr;

	char* 	servAddrIP;

	pid_t 	child_pid;


	// Get port number from command line
	if (argc != 3){
		std::cout << "Usage: server <IP_addr> <port_no>\n" << std::endl;
		return 0;
	}
	servAddrIP = argv[1];
	servport = atoi(argv[2]);
	// std::cout << servAddrIP << " " << servport << std::endl;
	

	// Create socket
	if ( (sockfd = socket(PF_INET,SOCK_DGRAM,0)) < 0 ){
		std::cerr << "\nERROR: " << std::flush;
		std::cout << strerror(errno) << std::endl;
		return 0;
	}
	std::cout << "Parent socket created successfully." << std::endl;

	bzero(&servaddr,sizeof(servaddr));
	servaddr.sin_family			= PF_INET;				// use UDP datagram Protocol
	servaddr.sin_addr.s_addr	= htonl(INADDR_ANY);	// use any interface
	servaddr.sin_port			= htons(servport);		// use portno provided by user

	// Bind socket to port/IP address
	if ( (bind(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) ) != 0 ){
		std::cerr << "\nERROR: " << std::flush;
		std::cout << strerror(errno) << std::endl;
		return 0;
	}
	std::cout << "Parent bind successful." << std::endl;

	for (;;){

		int			n;
		socklen_t	len = sizeof(cliaddr);
		char		mesg[MAXLINE];
		TFTPMESSAGE	message;

		// blocking read of next datagram
		n = recvfrom(sockfd, (void*)mesg, (size_t)MAXLINE, 0, (struct sockaddr*) &cliaddr, &len);
		if (n == -1){
			std::cerr << "\nERROR: " << len << " " << std::flush;
			std::cout << strerror(errno) << std::endl;
			return 0;
		}

		tftpDecode(mesg, &message);

		// std::cout << "\nopcode: " << message.opcode << std::flush;
		// std::cout << "\nseqNum: " << message.seqNum << std::flush;
		// std::cout << "\nerror: "  << message.error  << std::flush;
		// std::cout << "\nfilename: " << message.filename << std::flush;

		// ====================================================================================

		// fork process to handle new RRQ request
		child_pid = fork();
		if ( child_pid < 0 ){
			std::cout << strerror(errno) << std::endl;
			return 0;
		}
		if (child_pid == 0) { // child process: handle RRQ request

			// if decoded message is RRQ
			if (message.opcode == TFTP_RRQ) {

				int 	newSockfd;
				struct 	sockaddr_in childaddr;

				// close existing socket descriptor from parent
				if ( (close(sockfd)) != 0 ) {
					std::cout << strerror(errno) << std::endl;
				}

				// bind new ephemeral socket
				if ( (newSockfd = socket(PF_INET,SOCK_DGRAM,0)) < 0 ){
					std::cerr << "\nERROR: " << std::flush;
					std::cout << strerror(errno) << std::endl;
					return 0;
				}
				bzero(&servaddr,sizeof(servaddr));
				servaddr.sin_family			= PF_INET;				// use UDP datagram Protocol
				servaddr.sin_addr.s_addr	= htonl(INADDR_ANY);	// use any interface
				servaddr.sin_port			= htons(0);				// use ephemeral port

				// Bind socket to port/IP address
				if ( (bind(newSockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) ) != 0 ){
					std::cerr << "\nERROR: " << std::flush;
					std::cout << strerror(errno) << std::endl;
					return 0;
				}
				std::cout << "\nChild socket created successfully." << std::flush;

				// send data file to client
				CLIRECORD clientInfo;
				strcpy(clientInfo.filename, message.filename);
				clientInfo.seqNum 			= 0;
				clientInfo.lastSegmentSent 	= 0;
				clientInfo.cliaddr 			= cliaddr;
				clientInfo.cliSockfd 		= newSockfd;

				tftpRespondRRQ(&message, (struct sockaddr*) &cliaddr, &clientInfo);

				while(clientInfo.lastSegmentSent != 1) {
					n = recvfrom(newSockfd, mesg, MAXLINE, 0, (struct sockaddr*) &cliaddr, &len);
					tftpDecode(mesg, &message);

					if (message.opcode == TFTP_ACK) {
						// std::cout << "\nWe got an ACK ... :| " << std::flush;

						tftpRespondACK(&message, (struct sockaddr*) &cliaddr, &clientInfo);

						
					} else if (message.opcode == TFTP_ERR) {
						// std::cout << "\nWe got an ERR ... :| " << std::flush;
					} else if (message.opcode == TFTP_RRQ) {
						std::cout << "\nWe got a redundant RRQ ... :| " << std::flush;
					} else {
						std::cerr << "\nERROR: Unknown TFTP message type." << std::flush;
						return -1;
					}
				}


				std::cout << "\nChild closing." << std::flush;
				return 0;

			} 
		} // child block




	} // forever loop

	return 0;
}

# </SERVER.C> ==========================================================================================